# -*- coding: utf-8 -*-
"""TSI_project_insert_R.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1S_BT4px6ZNYvDfuErIgRk_B1YnuGt6kZ
"""

import sqlparse
from sqlparse.sql import IdentifierList, Identifier, Where, Function, Parenthesis, Values
import string

# BLOCCO MAIN
stringa1 = "INSERT INTO items (name,price) VALUES('Kellogs',2);"
stringa2 = "INSERT INTO  projects(name, start_date, end_date) VALUES ('AI for Marketing','2019-08-01','2019-12-31'), ('ML for Sales','2019-05-15','2019-11-20');"



def insert(tokens):
  table = ""
  where_found = False
  columns = []
  temp_values = []
  values = []

# scorre tutti i token per individuare il nome della tabella e trovare i nomi delle colonne ed i nomi dei valori,
# che vengono memorizzati rispettivamente nelle liste columns e values.
# (es) columns -> ['name', 'start_date', 'end_date']
#       values -> ['AI for Marketing', '2019-08-01', '2019-12-31', 'ML for Sales', '2019-05-15', '2019-11-20']
  for token in tokens:
    if isinstance(token, Function):
      table = token[0].value
      columns = find_column_names(token)
    if isinstance(token,Values):
      temp_values = find_column_values(token)

# Formatta gli elementi di values per eliminare la punteggiatura e gli elementi vuoti
  values = format_values(temp_values)

# calcola per ogni valore il nome della colonna associata e realizzata la query mongodb corrispondente
  output_parenthesis = convert_in_mongo(columns, values)
  
# Se vengono aggiunte pi√π di una tupla, il risultato viene racchiuso tra parentesi quadre
  if (len(columns) != len(values)):
    output_parenthesis = "[" + output_parenthesis + "]"
  output = "db." + table + ".insert( " + output_parenthesis + " )"
  return output


def find_column_names(token):
  columns = []
  for par in token:
    if isinstance(par,Parenthesis):
      for idlist in par:
        if isinstance(idlist,IdentifierList):
          for id in idlist:
            if isinstance(id,Identifier):
              columns.append(id.value)
  return columns

def find_column_values(token):
  temp_values = []
  for par in token:
    if isinstance(par,Parenthesis):
      for idlist in par:
        if isinstance(idlist,IdentifierList):
          for id in idlist:
            temp_values.append(id.value)
  return temp_values

def format_values(temp_values):
  values = []
  new_s_p = string.punctuation.translate(str.maketrans('','','-'))
  for s in temp_values:
      s = s.translate(str.maketrans('','',new_s_p))
      values.append(s)
  values = list(filter(None, values))
  return values

def convert_in_mongo(columns, values):
  output_parenthesis = ""
  for i, value in enumerate(values, start = 0):
    first_elem = ""
    last_elem = ""
    id_col = i%len(columns)
    if id_col == 0:
      first_elem = "{"
    elif id_col == len(columns)-1:
      last_elem = "}"
    output_parenthesis = output_parenthesis + first_elem +columns[id_col]  + ": '" + value + "'" + last_elem
    if value != values[-1]:
      output_parenthesis = output_parenthesis + ", "
  return output_parenthesis